<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sudoku Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            max-width: 600px;
        }

        h1 {
            text-align: center;
            color: #667eea;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        button {
            padding: 12px 24px;
            font-size: 16px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-new {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-new:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-check {
            background: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%);
            color: white;
        }

        .btn-check:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(86, 171, 47, 0.4);
        }

        .btn-hint {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
        }

        .btn-hint:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(245, 87, 108, 0.4);
        }

        .sudoku-grid {
            display: grid;
            grid-template-columns: repeat(9, 1fr);
            gap: 0;
            width: fit-content;
            margin: 0 auto;
            border: 3px solid #333;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .cell {
            width: 50px;
            height: 50px;
            border: 1px solid #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            background: white;
        }

        .cell:hover {
            background: #f0f0f0;
        }

        .cell input {
            width: 100%;
            height: 100%;
            border: none;
            text-align: center;
            font-size: 20px;
            font-weight: 600;
            background: transparent;
            color: #667eea;
        }

        .cell input:focus {
            outline: none;
            background: #e8f0fe;
        }

        .cell.fixed {
            background: #f5f5f5;
            color: #333;
        }

        .cell.fixed input {
            color: #333;
            cursor: not-allowed;
        }

        .cell.error {
            background: #ffebee;
            animation: shake 0.3s;
        }

        .cell.correct {
            background: #e8f5e9;
        }

        .cell:nth-child(3n):not(:nth-child(9n)) {
            border-right: 3px solid #333;
        }

        .cell:nth-child(n+19):nth-child(-n+27),
        .cell:nth-child(n+46):nth-child(-n+54) {
            border-bottom: 3px solid #333;
        }

        .status {
            text-align: center;
            margin-top: 20px;
            font-size: 18px;
            font-weight: 600;
            color: #667eea;
            min-height: 30px;
        }

        .status.success {
            color: #56ab2f;
        }

        .status.error {
            color: #f5576c;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        @media (max-width: 600px) {
            .container {
                padding: 20px;
            }

            h1 {
                font-size: 2em;
            }

            .cell {
                width: 35px;
                height: 35px;
                font-size: 16px;
            }

            .cell input {
                font-size: 16px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŽ¯ Sudoku</h1>
        
        <div class="controls">
            <button class="btn-new" onclick="newGame()">New Game</button>
            <button class="btn-check" onclick="checkSolution()">Check Solution</button>
            <button class="btn-hint" onclick="giveHint()">Get Hint</button>
        </div>

        <div class="sudoku-grid" id="grid"></div>
        
        <div class="status" id="status"></div>
    </div>

    <script>
        let puzzle = [];
        let solution = [];

        function generateSudoku() {
            const grid = Array(9).fill(null).map(() => Array(9).fill(0));
            
            function isValid(grid, row, col, num) {
                for (let x = 0; x < 9; x++) {
                    if (grid[row][x] === num || grid[x][col] === num) {
                        return false;
                    }
                }
                
                const startRow = row - row % 3;
                const startCol = col - col % 3;
                for (let i = 0; i < 3; i++) {
                    for (let j = 0; j < 3; j++) {
                        if (grid[i + startRow][j + startCol] === num) {
                            return false;
                        }
                    }
                }
                
                return true;
            }
            
            function solve(grid) {
                for (let row = 0; row < 9; row++) {
                    for (let col = 0; col < 9; col++) {
                        if (grid[row][col] === 0) {
                            const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9].sort(() => Math.random() - 0.5);
                            for (let num of nums) {
                                if (isValid(grid, row, col, num)) {
                                    grid[row][col] = num;
                                    if (solve(grid)) {
                                        return true;
                                    }
                                    grid[row][col] = 0;
                                }
                            }
                            return false;
                        }
                    }
                }
                return true;
            }
            
            solve(grid);
            return grid;
        }

        function createPuzzle(solution, difficulty = 40) {
            const puzzle = solution.map(row => [...row]);
            let count = difficulty;
            
            while (count > 0) {
                const row = Math.floor(Math.random() * 9);
                const col = Math.floor(Math.random() * 9);
                
                if (puzzle[row][col] !== 0) {
                    puzzle[row][col] = 0;
                    count--;
                }
            }
            
            return puzzle;
        }

        function renderGrid() {
            const grid = document.getElementById('grid');
            grid.innerHTML = '';
            
            for (let i = 0; i < 9; i++) {
                for (let j = 0; j < 9; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    
                    const input = document.createElement('input');
                    input.type = 'text';
                    input.maxLength = 1;
                    input.dataset.row = i;
                    input.dataset.col = j;
                    
                    if (puzzle[i][j] !== 0) {
                        input.value = puzzle[i][j];
                        input.disabled = true;
                        cell.classList.add('fixed');
                    }
                    
                    input.addEventListener('input', function(e) {
                        const val = e.target.value;
                        if (val && !/^[1-9]$/.test(val)) {
                            e.target.value = '';
                        }
                        cell.classList.remove('error', 'correct');
                    });
                    
                    cell.appendChild(input);
                    grid.appendChild(cell);
                }
            }
        }

        function newGame() {
            solution = generateSudoku();
            puzzle = createPuzzle(solution);
            renderGrid();
            document.getElementById('status').textContent = '';
            document.getElementById('status').className = 'status';
        }

        function checkSolution() {
            const inputs = document.querySelectorAll('.cell input');
            let correct = true;
            let complete = true;
            
            inputs.forEach(input => {
                const row = parseInt(input.dataset.row);
                const col = parseInt(input.dataset.col);
                const cell = input.parentElement;
                
                cell.classList.remove('error', 'correct');
                
                if (!input.disabled) {
                    if (input.value === '') {
                        complete = false;
                    } else if (parseInt(input.value) !== solution[row][col]) {
                        cell.classList.add('error');
                        correct = false;
                    } else {
                        cell.classList.add('correct');
                    }
                }
            });
            
            const status = document.getElementById('status');
            if (!complete) {
                status.textContent = 'Please fill all cells!';
                status.className = 'status error';
            } else if (correct) {
                status.textContent = 'ðŸŽ‰ Congratulations! You solved it!';
                status.className = 'status success';
            } else {
                status.textContent = 'Some cells are incorrect. Keep trying!';
                status.className = 'status error';
            }
        }

        function giveHint() {
            const inputs = document.querySelectorAll('.cell input:not(:disabled)');
            const empty = Array.from(inputs).filter(input => input.value === '');
            
            if (empty.length === 0) {
                document.getElementById('status').textContent = 'No empty cells!';
                return;
            }
            
            const randomCell = empty[Math.floor(Math.random() * empty.length)];
            const row = parseInt(randomCell.dataset.row);
            const col = parseInt(randomCell.dataset.col);
            
            randomCell.value = solution[row][col];
            randomCell.parentElement.classList.add('correct');
            
            document.getElementById('status').textContent = 'Hint added!';
            document.getElementById('status').className = 'status';
        }

        newGame();
    </script>
</body>
</html>
